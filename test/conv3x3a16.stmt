module name=conv3x3a16, target=hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query
internal func conv3x3a16_par_for_output_s0_y_y_v1 (__user_context, output.s0.y.y.v1, closure_arg) {
let closure_prototype = (void *)make_struct(reinterpret<(void *)>((uint64)0), reinterpret<(void *)>((uint64)0), reinterpret<(void *)>((uint64)0), 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint1)0)
let input = (void *)load_typed_struct_member((void *)closure_arg, closure_prototype, 0)
let mask = (void *)load_typed_struct_member((void *)closure_arg, closure_prototype, 1)
let output = (void *)load_typed_struct_member((void *)closure_arg, closure_prototype, 2)
let input.extent.0 = load_typed_struct_member((void *)closure_arg, closure_prototype, 3)
let input.extent.1 = load_typed_struct_member((void *)closure_arg, closure_prototype, 4)
let input.stride.1 = load_typed_struct_member((void *)closure_arg, closure_prototype, 5)
let output.stride.1 = load_typed_struct_member((void *)closure_arg, closure_prototype, 6)
let t147 = load_typed_struct_member((void *)closure_arg, closure_prototype, 7)
let t157 = load_typed_struct_member((void *)closure_arg, closure_prototype, 8)
let t158 = load_typed_struct_member((void *)closure_arg, closure_prototype, 9)
let t159 = load_typed_struct_member((void *)closure_arg, closure_prototype, 10)
let t166 = load_typed_struct_member((void *)closure_arg, closure_prototype, 11)
let t148 = (uint1)load_typed_struct_member((void *)closure_arg, closure_prototype, 12)
let output.s0.y.y.y.base = min(output.s0.y.y.v1*128, t147 + -128)
let t167 = min(output.s0.y.y.v1*128, t147 + -128)
for (output.s0.y.y.y, 0, 128) {
 if ((max(min(((output.s0.y.y.y + output.s0.y.y.y.base)*4) + 13, input.extent.1), 1) <= input.extent.1) && t148) {
  let t205 = (output.s0.y.y.y + t167) in (uint8)prefetch(input, (max(min(((output.s0.y.y.y + output.s0.y.y.y.base)*4) + 8, input.extent.1), 1) + -1)*input.stride.1, t159, 1, max(min((t205*4) + 13, input.extent.1) - max(min((t205*4) + 8, input.extent.1), 1), 0) + 1, input.stride.1)
 }
 allocate input_bounded[uint8 * (t158 + 128) * 6]
 produce input_bounded {
  let input_bounded.s0.y.prologue.s = let t206 = (output.s0.y.y.y + output.s0.y.y.y.base) in min(max(t206*4, 1), (t206*4) + 6)
  let input_bounded.s0.y.epilogue = let t207 = (output.s0.y.y.y + output.s0.y.y.y.base) in max(min((t207*4) + 5, input.extent.1), min(max(t207*4, 1), (t207*4) + 6) + -1)
  let t174 = (output.s0.y.y.y + output.s0.y.y.y.base)*4
  let t173 = 1 - max(min((output.s0.y.y.y + t167)*4, 1), -5)
  for (input_bounded.s0.y.rebased, 0, t173) {
   let t176 = (t158 + 128)*input_bounded.s0.y.rebased
   let t175 = (max(min(input_bounded.s0.y.rebased + t174, input.extent.1), 1) + -1)*input.stride.1
   for (input_bounded.s0.x.x, 0, t157 + 1) {
    input_bounded[ramp((input_bounded.s0.x.x*128) + t176, 1, 128) aligned(128, 0)] = input[max(min(ramp((input_bounded.s0.x.x*128) + -1, 1, 128), x128(input.extent.0 + -1)), x128(0)) + x128(t175)]
   }
  }
  let t180 = output.s0.y.y.y + t167
  let t181 = t180*4
  let t179 = t157 - t166
  let t177 = max(min(t181 + 5, input.extent.1) - min(max(t181, 1), t181 + 6), -1) + 1
  for (input_bounded.s0.y.rebased, 0, t177) {
   input_bounded[ramp(((input_bounded.s0.y.rebased - max(min(t180*4, 1), -5)) + 1)*(t158 + 128), 1, 128) aligned(128, 0)] = input[max(min(ramp(-1, 1, 128), x128(input.extent.0 + -1)), x128(0)) + x128(((input_bounded.s0.y.prologue.s + input_bounded.s0.y.rebased) + -1)*input.stride.1)]
   let t183 = ((input_bounded.s0.y.rebased - max(min(t180*4, 1), -5)) + 1)*(t158 + 128)
   let t182 = ((input_bounded.s0.y.prologue.s + input_bounded.s0.y.rebased) + -1)*input.stride.1
   for (input_bounded.s0.x.x.rebased, 0, t166) {
    input_bounded[ramp(((input_bounded.s0.x.x.rebased*128) + t183) + 128, 1, 128) aligned(128, 0)] = input[ramp(((input_bounded.s0.x.x.rebased*128) + t182) + 127, 1, 128) aligned(128, 127)]
   }
   let t185 = ((input_bounded.s0.y.rebased - max(min(t180*4, 1), -5)) + 1)*(t158 + 128)
   let t184 = ((input_bounded.s0.y.prologue.s + input_bounded.s0.y.rebased) + -1)*input.stride.1
   for (input_bounded.s0.x.x.rebased, 0, t179) {
    let t137 = input_bounded.s0.x.x.rebased + t166
    input_bounded[ramp(((t137*128) + t185) + 128, 1, 128) aligned(128, 0)] = input[max(min(ramp((t137*128) + 127, 1, 128), x128(input.extent.0 + -1)), x128(0)) + x128(t184)]
   }
  }
  let t188 = output.s0.y.y.y + t167
  let t189 = t188*4
  let t186 = (t189 - max(min(t189 + 5, input.extent.1), min(max(t189, 1), t189 + 6) + -1)) + 5
  for (input_bounded.s0.y.rebased, 0, t186) {
   let t192 = t188*4
   let t191 = (((max(min(t192 + 5, input.extent.1), min(max(t192, 1), t192 + 6) + -1) - t192) + input_bounded.s0.y.rebased) + 1)*(t158 + 128)
   let t190 = max(min(input.extent.1 + -1, input_bounded.s0.y.epilogue + input_bounded.s0.y.rebased), 0)*input.stride.1
   for (input_bounded.s0.x.x, 0, t157 + 1) {
    input_bounded[ramp((input_bounded.s0.x.x*128) + t191, 1, 128) aligned(128, 0)] = input[max(min(ramp((input_bounded.s0.x.x*128) + -1, 1, 128), x128(input.extent.0 + -1)), x128(0)) + x128(t190)]
   }
  }
 }
 consume input_bounded {
  let t201 = output.s0.y.y.y + output.s0.y.y.y.base
  let t202 = t201*4
  let t194 = output.stride.1*t201
  let t200 = (t202 + 3)*output.stride.1
  let t198 = (t202 + 2)*output.stride.1
  let t196 = (t202 + 1)*output.stride.1
  for (output.s0.x.x, 0, t157) {
   let t106 = (t157*2) + output.s0.x.x
   let t142 = output.s0.x.x + t157
   output[ramp(((output.s0.x.x*32) + t194)*4, 1, 128) aligned(128, 0)] = (uint8x128)saturating_cast((int16x128)shift_right((int16x128)widening_mul(input_bounded[ramp((output.s0.x.x*128) + 1, 1, 128) aligned(128, 1)], x128(mask[1])) + ((int16x128)widening_mul(input_bounded[ramp(output.s0.x.x*128, 1, 128) aligned(128, 0)], x128(mask[0])) + ((int16x128)widening_mul(input_bounded[ramp((output.s0.x.x*128) + 2, 1, 128) aligned(128, 2)], x128(mask[2])) + ((int16x128)widening_mul(input_bounded[ramp((t142*128) + 128, 1, 128) aligned(128, 0)], x128(mask[3])) + ((int16x128)widening_mul(input_bounded[ramp((t142*128) + 129, 1, 128) aligned(128, 1)], x128(mask[4])) + ((int16x128)widening_mul(input_bounded[ramp((t142*128) + 130, 1, 128) aligned(128, 2)], x128(mask[5])) + ((int16x128)widening_mul(input_bounded[ramp((t106*128) + 256, 1, 128) aligned(128, 0)], x128(mask[6])) + ((int16x128)widening_mul(input_bounded[ramp((t106*128) + 258, 1, 128) aligned(128, 2)], x128(mask[8])) + (int16x128)widening_mul(input_bounded[ramp((t106*128) + 257, 1, 128) aligned(128, 1)], x128(mask[7]))))))))), x128((uint16)4)))
   let t108 = (t157*3) + output.s0.x.x
   let t109 = output.s0.x.x + t157
   let t143 = (t157*2) + output.s0.x.x
   output[ramp((output.s0.x.x*128) + t196, 1, 128) aligned(128, 0)] = (uint8x128)saturating_cast((int16x128)shift_right((int16x128)widening_mul(input_bounded[ramp((t109*128) + 129, 1, 128) aligned(128, 1)], x128(mask[1])) + ((int16x128)widening_mul(input_bounded[ramp((t109*128) + 128, 1, 128) aligned(128, 0)], x128(mask[0])) + ((int16x128)widening_mul(input_bounded[ramp((t109*128) + 130, 1, 128) aligned(128, 2)], x128(mask[2])) + ((int16x128)widening_mul(input_bounded[ramp((t143*128) + 256, 1, 128) aligned(128, 0)], x128(mask[3])) + ((int16x128)widening_mul(input_bounded[ramp((t143*128) + 257, 1, 128) aligned(128, 1)], x128(mask[4])) + ((int16x128)widening_mul(input_bounded[ramp((t143*128) + 258, 1, 128) aligned(128, 2)], x128(mask[5])) + ((int16x128)widening_mul(input_bounded[ramp((t108*128) + 384, 1, 128) aligned(128, 0)], x128(mask[6])) + ((int16x128)widening_mul(input_bounded[ramp((t108*128) + 386, 1, 128) aligned(128, 2)], x128(mask[8])) + (int16x128)widening_mul(input_bounded[ramp((t108*128) + 385, 1, 128) aligned(128, 1)], x128(mask[7]))))))))), x128((uint16)4)))
   let t111 = (t157*4) + output.s0.x.x
   let t112 = (t157*2) + output.s0.x.x
   let t144 = (t157*3) + output.s0.x.x
   output[ramp((output.s0.x.x*128) + t198, 1, 128) aligned(128, 0)] = (uint8x128)saturating_cast((int16x128)shift_right((int16x128)widening_mul(input_bounded[ramp((t112*128) + 257, 1, 128) aligned(128, 1)], x128(mask[1])) + ((int16x128)widening_mul(input_bounded[ramp((t112*128) + 256, 1, 128) aligned(128, 0)], x128(mask[0])) + ((int16x128)widening_mul(input_bounded[ramp((t112*128) + 258, 1, 128) aligned(128, 2)], x128(mask[2])) + ((int16x128)widening_mul(input_bounded[ramp((t144*128) + 384, 1, 128) aligned(128, 0)], x128(mask[3])) + ((int16x128)widening_mul(input_bounded[ramp((t144*128) + 385, 1, 128) aligned(128, 1)], x128(mask[4])) + ((int16x128)widening_mul(input_bounded[ramp((t144*128) + 386, 1, 128) aligned(128, 2)], x128(mask[5])) + ((int16x128)widening_mul(input_bounded[ramp((t111*128) + 512, 1, 128) aligned(128, 0)], x128(mask[6])) + ((int16x128)widening_mul(input_bounded[ramp((t111*128) + 514, 1, 128) aligned(128, 2)], x128(mask[8])) + (int16x128)widening_mul(input_bounded[ramp((t111*128) + 513, 1, 128) aligned(128, 1)], x128(mask[7]))))))))), x128((uint16)4)))
   let t114 = (t157*5) + output.s0.x.x
   let t115 = (t157*3) + output.s0.x.x
   let t145 = (t157*4) + output.s0.x.x
   output[ramp((output.s0.x.x*128) + t200, 1, 128) aligned(128, 0)] = (uint8x128)saturating_cast((int16x128)shift_right((int16x128)widening_mul(input_bounded[ramp((t115*128) + 385, 1, 128) aligned(128, 1)], x128(mask[1])) + ((int16x128)widening_mul(input_bounded[ramp((t115*128) + 384, 1, 128) aligned(128, 0)], x128(mask[0])) + ((int16x128)widening_mul(input_bounded[ramp((t115*128) + 386, 1, 128) aligned(128, 2)], x128(mask[2])) + ((int16x128)widening_mul(input_bounded[ramp((t145*128) + 512, 1, 128) aligned(128, 0)], x128(mask[3])) + ((int16x128)widening_mul(input_bounded[ramp((t145*128) + 513, 1, 128) aligned(128, 1)], x128(mask[4])) + ((int16x128)widening_mul(input_bounded[ramp((t145*128) + 514, 1, 128) aligned(128, 2)], x128(mask[5])) + ((int16x128)widening_mul(input_bounded[ramp((t114*128) + 640, 1, 128) aligned(128, 0)], x128(mask[6])) + ((int16x128)widening_mul(input_bounded[ramp((t114*128) + 642, 1, 128) aligned(128, 2)], x128(mask[8])) + (int16x128)widening_mul(input_bounded[ramp((t114*128) + 641, 1, 128) aligned(128, 1)], x128(mask[7]))))))))), x128((uint16)4)))
  }
 }
 free input_bounded
}
}


external_plus_metadata func conv3x3a16 (input, mask, output) {
let input = (void *)_halide_buffer_get_host((struct halide_buffer_t *)input.buffer)
let input.extent.0 = _halide_buffer_get_extent((struct halide_buffer_t *)input.buffer, 0)
let input.extent.1 = _halide_buffer_get_extent((struct halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((struct halide_buffer_t *)input.buffer, 1)
let mask = (void *)_halide_buffer_get_host((struct halide_buffer_t *)mask.buffer)
let output = (void *)_halide_buffer_get_host((struct halide_buffer_t *)output.buffer)
let output.extent.0 = _halide_buffer_get_extent((struct halide_buffer_t *)output.buffer, 0)
let output.extent.1 = _halide_buffer_get_extent((struct halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((struct halide_buffer_t *)output.buffer, 1)
produce output {
 let t157 = (output.extent.0 + 127)/128
 let t158 = t157*128
 let t159 = min(t158 + 127, input.extent.0)
 let t148 = max(t159, 1) <= input.extent.0
 let t152 = min(output.extent.0 + 254, input.extent.0)
 let t146 = (output.extent.1 + 511)/512
 let t147 = (output.extent.1 + 3)/4
 for<Hexagon> (output.s0.__outermost, 0, 1) {
  let t166 = max((t152 + -127)/128, 0)
  let parallel_closure = (void *)make_struct(input, mask, output, input.extent.0, input.extent.1, input.stride.1, output.stride.1, t147, t157, t158, t159, t166, t148)
  let closure_result = halide_do_par_for((halide_task_t)::conv3x3a16_par_for_output_s0_y_y_v1, 0, t146, (uint8_t *)(parallel_closure))
  assert(closure_result == 0, closure_result)
 }
}
}


