module name=blur3x3, target=hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query
internal func blur3x3_par_for_blur_y_s0_y_y (__user_context, blur_y.s0.y.y, closure_arg) {
let closure_prototype = (void *)make_struct(reinterpret<(void *)>((uint64)0), reinterpret<(void *)>((uint64)0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint1)0, (uint1)0, (uint1)0)
let blur_y = (void *)load_typed_struct_member((void *)closure_arg, closure_prototype, 0)
let input = (void *)load_typed_struct_member((void *)closure_arg, closure_prototype, 1)
let blur_y.extent.0 = load_typed_struct_member((void *)closure_arg, closure_prototype, 2)
let blur_y.extent.1 = load_typed_struct_member((void *)closure_arg, closure_prototype, 3)
let blur_y.stride.1 = load_typed_struct_member((void *)closure_arg, closure_prototype, 4)
let input.extent.1 = load_typed_struct_member((void *)closure_arg, closure_prototype, 5)
let input.stride.1 = load_typed_struct_member((void *)closure_arg, closure_prototype, 6)
let t90 = load_typed_struct_member((void *)closure_arg, closure_prototype, 7)
let t95 = load_typed_struct_member((void *)closure_arg, closure_prototype, 8)
let t97 = load_typed_struct_member((void *)closure_arg, closure_prototype, 9)
let t98 = load_typed_struct_member((void *)closure_arg, closure_prototype, 10)
let t99 = load_typed_struct_member((void *)closure_arg, closure_prototype, 11)
let t100 = (uint1)load_typed_struct_member((void *)closure_arg, closure_prototype, 12)
let t93 = (uint1)load_typed_struct_member((void *)closure_arg, closure_prototype, 13)
let t96 = (uint1)load_typed_struct_member((void *)closure_arg, closure_prototype, 14)
if (let t111 = min((blur_y.s0.y.y*128) + 384, blur_y.extent.1) in (((128 <= t111) && t100) && ((t111 + 2) <= input.extent.1))) {
 (uint16)prefetch(input, (min((blur_y.s0.y.y*128) + 384, blur_y.extent.1) + -128)*input.stride.1, blur_y.extent.0 + 2, 1, 130, input.stride.1)
}
let blur_y.s0.y.yi.base = min(blur_y.s0.y.y*128, blur_y.extent.1 + -128)
allocate blur_x[uint16 * t99 * 4]
for (blur_y.s0.y.yi.$n.rebased, 0, 130) {
 produce blur_x {
  let t105 = blur_y.s0.y.yi.$n.rebased + blur_y.s0.y.yi.base
  let t104 = ((t105 % 4)*t99) - t98
  let t103 = ((t105 + -2)*input.stride.1) + t97
  for (blur_x.s0.x.x, 0, t90) {
   let blur_x.s0.x.v1.base.s = (blur_x.s0.x.x*64) + t98
   let t71 = blur_x.s0.x.v1.base.s + t103
   blur_x[ramp(blur_x.s0.x.v1.base.s + t104, 1, 64)] = (input[ramp(t71 + -63, 1, 64)] + (input[ramp(t71 + -62, 1, 64)] + input[ramp(t71 + -64, 1, 64)]))/x64((uint16)3)
  }
  if (t93) {
   let t73 = (((blur_y.s0.y.yi.$n.rebased + blur_y.s0.y.yi.base) + -2)*input.stride.1) + (blur_y.extent.0 + t97)
   blur_x[ramp(((((blur_y.s0.y.yi.$n.rebased + blur_y.s0.y.yi.base) % 4) + 1)*t99) + -64, 1, 64)] = (input[ramp(t73 + -63, 1, 64)] + (input[ramp(t73 + -62, 1, 64)] + input[ramp(t73 + -64, 1, 64)]))/x64((uint16)3)
  }
 }
 if (2 <= blur_y.s0.y.yi.$n.rebased) {
  consume blur_x {
   let t106 = blur_y.s0.y.yi.$n.rebased + blur_y.s0.y.yi.base
   for (blur_y.s0.x.x, 0, t95) {
    blur_y[ramp(((t106 + -2)*blur_y.stride.1) + (blur_y.s0.x.x*64), 1, 64)] = (blur_x[ramp((((t106 + 3) % 4)*blur_y.extent.0) + (blur_y.s0.x.x*64), 1, 64)] + (blur_x[ramp(((t106 % 4)*blur_y.extent.0) + (blur_y.s0.x.x*64), 1, 64)] + blur_x[ramp((((t106 + 2) % 4)*blur_y.extent.0) + (blur_y.s0.x.x*64), 1, 64)]))/x64((uint16)3)
   }
   if (t96) {
    let t85 = blur_y.s0.y.yi.$n.rebased + blur_y.s0.y.yi.base
    blur_y[ramp((((t85 + -2)*blur_y.stride.1) + blur_y.extent.0) + -64, 1, 64)] = (blur_x[ramp(((((t85 + 3) % 4) + 1)*t99) + -64, 1, 64)] + (blur_x[ramp((((t85 % 4) + 1)*t99) + -64, 1, 64)] + blur_x[ramp(((((t85 + 2) % 4) + 1)*t99) + -64, 1, 64)]))/x64((uint16)3)
   }
  }
 }
}
free blur_x
}


external_plus_metadata func blur3x3 (input, blur_y) {
let blur_y = (void *)_halide_buffer_get_host((struct halide_buffer_t *)blur_y.buffer)
let blur_y.extent.0 = _halide_buffer_get_extent((struct halide_buffer_t *)blur_y.buffer, 0)
let blur_y.extent.1 = _halide_buffer_get_extent((struct halide_buffer_t *)blur_y.buffer, 1)
let blur_y.stride.1 = _halide_buffer_get_stride((struct halide_buffer_t *)blur_y.buffer, 1)
let input = (void *)_halide_buffer_get_host((struct halide_buffer_t *)input.buffer)
let input.extent.0 = _halide_buffer_get_extent((struct halide_buffer_t *)input.buffer, 0)
let input.extent.1 = _halide_buffer_get_extent((struct halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((struct halide_buffer_t *)input.buffer, 1)
produce blur_y {
 let t97 = input.stride.1*2
 let t98 = min(blur_y.extent.0, 64)
 let t99 = max(blur_y.extent.0, 64)
 let t88 = 64 <= blur_y.extent.0
 let t93 = (t99 % 64) != 0
 let t96 = (blur_y.extent.0 % 64) != 0
 let t86 = (blur_y.extent.1 + 127)/128
 let t90 = t99/64
 let t95 = blur_y.extent.0/64
 let t87 = (((t99 + 63)/64)*64) + t98
 for<Hexagon> (blur_y.s0.__outermost, 0, 1) {
  let t100 = ((max(min(t87 + -64, blur_y.extent.0), min(blur_y.extent.0 + 64, t87) + -63) + 1) <= input.extent.0) && t88
  let parallel_closure = (void *)make_struct(blur_y, input, blur_y.extent.0, blur_y.extent.1, blur_y.stride.1, input.extent.1, input.stride.1, t90, t95, t97, t98, t99, t100, t93, t96)
  let closure_result = halide_do_par_for((halide_task_t)::blur3x3_par_for_blur_y_s0_y_y, 0, t86, (uint8_t *)(parallel_closure))
  assert(closure_result == 0, closure_result)
 }
}
}


