module name=gaussian5x5, target=hexagon-32-noos-hvx-hvx_128-hvx_v66-no_asserts-no_bounds_query
internal func gaussian5x5_par_for_output_s0_y_y_v1 (__user_context, output.s0.y.y.v1, closure_arg) {
let closure_prototype = (void *)make_struct(reinterpret<(void *)>((uint64)0), reinterpret<(void *)>((uint64)0), 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint1)0)
let input = (void *)load_typed_struct_member((void *)closure_arg, closure_prototype, 0)
let output = (void *)load_typed_struct_member((void *)closure_arg, closure_prototype, 1)
let input.extent.0 = load_typed_struct_member((void *)closure_arg, closure_prototype, 2)
let input.extent.1 = load_typed_struct_member((void *)closure_arg, closure_prototype, 3)
let input.stride.1 = load_typed_struct_member((void *)closure_arg, closure_prototype, 4)
let output.stride.1 = load_typed_struct_member((void *)closure_arg, closure_prototype, 5)
let t137 = load_typed_struct_member((void *)closure_arg, closure_prototype, 6)
let t150 = load_typed_struct_member((void *)closure_arg, closure_prototype, 7)
let t151 = load_typed_struct_member((void *)closure_arg, closure_prototype, 8)
let t152 = load_typed_struct_member((void *)closure_arg, closure_prototype, 9)
let t161 = load_typed_struct_member((void *)closure_arg, closure_prototype, 10)
let t138 = (uint1)load_typed_struct_member((void *)closure_arg, closure_prototype, 11)
let output.s0.y.y.y.base = min(output.s0.y.y.v1*128, t137 + -128)
let t162 = min(output.s0.y.y.v1*128, t137 + -128)
for (output.s0.y.y.y, 0, 128) {
 if ((max(min(((output.s0.y.y.y + output.s0.y.y.y.base)*4) + 14, input.extent.1), 1) <= input.extent.1) && t138) {
  let t206 = (output.s0.y.y.y + t162) in (uint8)prefetch(input, (max(min(((output.s0.y.y.y + output.s0.y.y.y.base)*4) + 7, input.extent.1), 1) + -1)*input.stride.1, t152, 1, max(min((t206*4) + 14, input.extent.1) - max(min((t206*4) + 7, input.extent.1), 1), 0) + 1, input.stride.1)
 }
 allocate bounded_input[uint8 * (t151 + 128) * 8]
 produce bounded_input {
  let bounded_input.s0.y.prologue.s = let t207 = (output.s0.y.y.y + output.s0.y.y.y.base) in min(max(t207*4, 2), (t207*4) + 8)
  let bounded_input.s0.y.epilogue = let t208 = (output.s0.y.y.y + output.s0.y.y.y.base) in max(min((t208*4) + 6, input.extent.1), min(max(t208*4, 2), (t208*4) + 8) + -2)
  let t171 = (output.s0.y.y.y + output.s0.y.y.y.base)*4
  let t170 = 2 - max(min((output.s0.y.y.y + t162)*4, 2), -6)
  for (bounded_input.s0.y.rebased, 0, t170) {
   let t172 = (max(min(input.extent.1 + 1, bounded_input.s0.y.rebased + t171), 2) + -2)*input.stride.1
   let t173 = (t151 + 128)*bounded_input.s0.y.rebased
   for (bounded_input.s0.x.x, 0, t150 + 1) {
    bounded_input[ramp((bounded_input.s0.x.x*128) + t173, 1, 128) aligned(128, 0)] = input[max(min(ramp((bounded_input.s0.x.x*128) + -2, 1, 128), x128(input.extent.0 + -1)), x128(0)) + x128(t172)]
   }
  }
  let t177 = output.s0.y.y.y + t162
  let t178 = t177*4
  let t176 = t150 - t161
  let t174 = max(min(t178 + 6, input.extent.1) - min(max(t178, 2), t178 + 8), -2) + 2
  for (bounded_input.s0.y.rebased, 0, t174) {
   bounded_input[ramp(((bounded_input.s0.y.rebased - max(min(t177*4, 2), -6)) + 2)*(t151 + 128), 1, 128) aligned(128, 0)] = input[max(min(ramp(-2, 1, 128), x128(input.extent.0 + -1)), x128(0)) + x128(((bounded_input.s0.y.prologue.s + bounded_input.s0.y.rebased) + -2)*input.stride.1)]
   let t180 = ((bounded_input.s0.y.rebased - max(min(t177*4, 2), -6)) + 2)*(t151 + 128)
   let t179 = ((bounded_input.s0.y.prologue.s + bounded_input.s0.y.rebased) + -2)*input.stride.1
   for (bounded_input.s0.x.x.rebased, 0, t161) {
    bounded_input[ramp(((bounded_input.s0.x.x.rebased*128) + t180) + 128, 1, 128) aligned(128, 0)] = input[ramp(((bounded_input.s0.x.x.rebased*128) + t179) + 126, 1, 128) aligned(128, 126)]
   }
   let t182 = ((bounded_input.s0.y.rebased - max(min(t177*4, 2), -6)) + 2)*(t151 + 128)
   let t181 = ((bounded_input.s0.y.prologue.s + bounded_input.s0.y.rebased) + -2)*input.stride.1
   for (bounded_input.s0.x.x.rebased, 0, t176) {
    let t128 = bounded_input.s0.x.x.rebased + t161
    bounded_input[ramp(((t128*128) + t182) + 128, 1, 128) aligned(128, 0)] = input[max(min(ramp((t128*128) + 126, 1, 128), x128(input.extent.0 + -1)), x128(0)) + x128(t181)]
   }
  }
  let t185 = output.s0.y.y.y + t162
  let t186 = t185*4
  let t183 = (t186 - max(min(t186 + 6, input.extent.1), min(max(t186, 2), t186 + 8) + -2)) + 6
  for (bounded_input.s0.y.rebased, 0, t183) {
   let t189 = t185*4
   let t188 = (((max(min(t189 + 6, input.extent.1), min(max(t189, 2), t189 + 8) + -2) - t189) + bounded_input.s0.y.rebased) + 2)*(t151 + 128)
   let t187 = max(min(input.extent.1 + -1, bounded_input.s0.y.epilogue + bounded_input.s0.y.rebased), 0)*input.stride.1
   for (bounded_input.s0.x.x, 0, t150 + 1) {
    bounded_input[ramp((bounded_input.s0.x.x*128) + t188, 1, 128) aligned(128, 0)] = input[max(min(ramp((bounded_input.s0.x.x*128) + -2, 1, 128), x128(input.extent.0 + -1)), x128(0)) + x128(t187)]
   }
  }
 }
 allocate rows[int16 * (t151 + 128) * 4]
 produce rows {
  consume bounded_input {
   for (rows.s0.x.x, 0, t150 + 1) {
    rows[ramp(rows.s0.x.x*128, 1, 128) aligned(128, 0)] = int16x128((uint16x128)widen_right_add(uint16x128(int16x128((uint16x128)widen_right_add(uint16x128(((int16x128)shift_left(int16x128(bounded_input[ramp(((rows.s0.x.x + t150)*128) + 128, 1, 128) aligned(128, 0)]), x128((uint16)2)) + ((int16x128)shift_left(int16x128(bounded_input[ramp((((t150*3) + rows.s0.x.x)*128) + 384, 1, 128) aligned(128, 0)]), x128((uint16)2)) + (int16x128)widening_mul(bounded_input[ramp((((t150*2) + rows.s0.x.x)*128) + 256, 1, 128) aligned(128, 0)], x128((int8)6))))), bounded_input[ramp(rows.s0.x.x*128, 1, 128) aligned(128, 0)]))), bounded_input[ramp((((t150*4) + rows.s0.x.x)*128) + 512, 1, 128) aligned(128, 0)]))
    let t209 = rows.s0.x.x + t150
    rows[ramp((t209*128) + 128, 1, 128) aligned(128, 0)] = int16x128((uint16x128)widen_right_add(uint16x128(int16x128((uint16x128)widen_right_add(uint16x128(((int16x128)shift_left(int16x128(bounded_input[ramp((((t150*2) + rows.s0.x.x)*128) + 256, 1, 128) aligned(128, 0)]), x128((uint16)2)) + ((int16x128)shift_left(int16x128(bounded_input[ramp((((t150*4) + rows.s0.x.x)*128) + 512, 1, 128) aligned(128, 0)]), x128((uint16)2)) + (int16x128)widening_mul(bounded_input[ramp((((t150*3) + rows.s0.x.x)*128) + 384, 1, 128) aligned(128, 0)], x128((int8)6))))), bounded_input[ramp((t209*128) + 128, 1, 128) aligned(128, 0)]))), bounded_input[ramp((((t150*5) + rows.s0.x.x)*128) + 640, 1, 128) aligned(128, 0)]))
    let t210 = (t150*2) + rows.s0.x.x
    rows[ramp((t210*128) + 256, 1, 128) aligned(128, 0)] = int16x128((uint16x128)widen_right_add(uint16x128(int16x128((uint16x128)widen_right_add(uint16x128(((int16x128)shift_left(int16x128(bounded_input[ramp((((t150*3) + rows.s0.x.x)*128) + 384, 1, 128) aligned(128, 0)]), x128((uint16)2)) + ((int16x128)shift_left(int16x128(bounded_input[ramp((((t150*5) + rows.s0.x.x)*128) + 640, 1, 128) aligned(128, 0)]), x128((uint16)2)) + (int16x128)widening_mul(bounded_input[ramp((((t150*4) + rows.s0.x.x)*128) + 512, 1, 128) aligned(128, 0)], x128((int8)6))))), bounded_input[ramp((t210*128) + 256, 1, 128) aligned(128, 0)]))), bounded_input[ramp((((t150*6) + rows.s0.x.x)*128) + 768, 1, 128) aligned(128, 0)]))
    let t211 = (t150*3) + rows.s0.x.x
    rows[ramp((t211*128) + 384, 1, 128) aligned(128, 0)] = int16x128((uint16x128)widen_right_add(uint16x128(int16x128((uint16x128)widen_right_add(uint16x128(((int16x128)shift_left(int16x128(bounded_input[ramp((((t150*4) + rows.s0.x.x)*128) + 512, 1, 128) aligned(128, 0)]), x128((uint16)2)) + ((int16x128)shift_left(int16x128(bounded_input[ramp((((t150*6) + rows.s0.x.x)*128) + 768, 1, 128) aligned(128, 0)]), x128((uint16)2)) + (int16x128)widening_mul(bounded_input[ramp((((t150*5) + rows.s0.x.x)*128) + 640, 1, 128) aligned(128, 0)], x128((int8)6))))), bounded_input[ramp((t211*128) + 384, 1, 128) aligned(128, 0)]))), bounded_input[ramp((((t150*7) + rows.s0.x.x)*128) + 896, 1, 128) aligned(128, 0)]))
   }
  }
 }
 free bounded_input
 consume rows {
  let t202 = output.s0.y.y.y + output.s0.y.y.y.base
  let t203 = t202*4
  let t196 = output.stride.1*t202
  let t201 = (t203 + 3)*output.stride.1
  let t199 = (t203 + 2)*output.stride.1
  let t197 = (t203 + 1)*output.stride.1
  for (output.s0.x.x, 0, t150) {
   output[ramp(((output.s0.x.x*32) + t196)*4, 1, 128) aligned(128, 0)] = uint8x128((int16x128)shift_right((int16x128)shift_left(rows[ramp((output.s0.x.x*128) + 1, 1, 128) aligned(128, 1)], x128((uint16)2)) + (rows[ramp(output.s0.x.x*128, 1, 128) aligned(128, 0)] + ((int16x128)widen_right_mul(rows[ramp((output.s0.x.x*128) + 2, 1, 128) aligned(128, 2)], x128((int8)6)) + (rows[ramp((output.s0.x.x*128) + 4, 1, 128) aligned(128, 4)] + (int16x128)shift_left(rows[ramp((output.s0.x.x*128) + 3, 1, 128) aligned(128, 3)], x128((uint16)2))))), x128((uint16)8)))
   let t133 = output.s0.x.x + t150
   output[ramp((output.s0.x.x*128) + t197, 1, 128) aligned(128, 0)] = uint8x128((int16x128)shift_right((int16x128)shift_left(rows[ramp((t133*128) + 129, 1, 128) aligned(128, 1)], x128((uint16)2)) + (rows[ramp((t133*128) + 128, 1, 128) aligned(128, 0)] + ((int16x128)widen_right_mul(rows[ramp((t133*128) + 130, 1, 128) aligned(128, 2)], x128((int8)6)) + (rows[ramp((t133*128) + 132, 1, 128) aligned(128, 4)] + (int16x128)shift_left(rows[ramp((t133*128) + 131, 1, 128) aligned(128, 3)], x128((uint16)2))))), x128((uint16)8)))
   let t134 = (t150*2) + output.s0.x.x
   output[ramp((output.s0.x.x*128) + t199, 1, 128) aligned(128, 0)] = uint8x128((int16x128)shift_right((int16x128)shift_left(rows[ramp((t134*128) + 257, 1, 128) aligned(128, 1)], x128((uint16)2)) + (rows[ramp((t134*128) + 256, 1, 128) aligned(128, 0)] + ((int16x128)widen_right_mul(rows[ramp((t134*128) + 258, 1, 128) aligned(128, 2)], x128((int8)6)) + (rows[ramp((t134*128) + 260, 1, 128) aligned(128, 4)] + (int16x128)shift_left(rows[ramp((t134*128) + 259, 1, 128) aligned(128, 3)], x128((uint16)2))))), x128((uint16)8)))
   let t135 = (t150*3) + output.s0.x.x
   output[ramp((output.s0.x.x*128) + t201, 1, 128) aligned(128, 0)] = uint8x128((int16x128)shift_right((int16x128)shift_left(rows[ramp((t135*128) + 385, 1, 128) aligned(128, 1)], x128((uint16)2)) + (rows[ramp((t135*128) + 384, 1, 128) aligned(128, 0)] + ((int16x128)widen_right_mul(rows[ramp((t135*128) + 386, 1, 128) aligned(128, 2)], x128((int8)6)) + (rows[ramp((t135*128) + 388, 1, 128) aligned(128, 4)] + (int16x128)shift_left(rows[ramp((t135*128) + 387, 1, 128) aligned(128, 3)], x128((uint16)2))))), x128((uint16)8)))
  }
 }
 free rows
}
}


external_plus_metadata func gaussian5x5 (input, output) {
let input = (void *)_halide_buffer_get_host((struct halide_buffer_t *)input.buffer)
let input.extent.0 = _halide_buffer_get_extent((struct halide_buffer_t *)input.buffer, 0)
let input.extent.1 = _halide_buffer_get_extent((struct halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((struct halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((struct halide_buffer_t *)output.buffer)
let output.extent.0 = _halide_buffer_get_extent((struct halide_buffer_t *)output.buffer, 0)
let output.extent.1 = _halide_buffer_get_extent((struct halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((struct halide_buffer_t *)output.buffer, 1)
produce output {
 let t150 = (output.extent.0 + 127)/128
 let t151 = t150*128
 let t152 = min(t151 + 126, input.extent.0)
 let t138 = max(t152, 1) <= input.extent.0
 let t142 = min(output.extent.0 + 253, input.extent.0)
 let t136 = (output.extent.1 + 511)/512
 let t137 = (output.extent.1 + 3)/4
 for<Hexagon> (output.s0.__outermost, 0, 1) {
  let t161 = max((t142 + -126)/128, 0)
  let parallel_closure = (void *)make_struct(input, output, input.extent.0, input.extent.1, input.stride.1, output.stride.1, t137, t150, t151, t152, t161, t138)
  let closure_result = halide_do_par_for((halide_task_t)::gaussian5x5_par_for_output_s0_y_y_v1, 0, t136, (uint8_t *)(parallel_closure))
  assert(closure_result == 0, closure_result)
 }
}
}


